import { processTest, populateTransaction } from "../../test.fixture";

const contractName = "ExchangeV2";

const testLabel = "swap"; // <= Name of the test
const testDirSuffix = "swap"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x6352a56caadc4f1e25cd6c75970fa768a3304e64";
const chainID = 1;

// From ETH->USDT: https://etherscan.io/tx/0x22075917201a3d40cb2fc7cff755999677a0cb0a0cd81c5fb526615148bfe252
// From LUSD->CRV: https://etherscan.io/tx/0x90c03855cdac3c6e9b14b0c797ffe2a8d75cee7ff4d61bc2ba2ea1da4b631514
const inputData = "0x90411a32000000000000000000000000d669621c0f97b11f8e74fa57bbf7e33dfb093f91000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000005f98805a4e8be255a32880fdec7f6728c6568ba0000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000d669621c0f97b11f8e74fa57bbf7e33dfb093f91000000000000000000000000ae076a41b227e7ba07ca7c5791df168de7e1664600000000000000000000000000000000000000000000009d240d5cfa56cbd0e40000000000000000000000000000000000000000000000a12b1456b5032100d80000000000000000000000000000000000000000000000a1690fa04aa0cf64f600000000000000000000000000000000000000000000000000000000000000020000000000000000000000005521c3dfd563d48ca64e132324024470f3498526000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000104e5b07cdb0000000000000000000000009663f2ca0454accad3e094448ea6f77443880454000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000009d240d5cfa56cbd0e4000000000000000000000000d669621c0f97b11f8e74fa57bbf7e33dfb093f9100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002b5f98805a4e8be255a32880fdec7f6728c6568ba0000bb8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002449f865422000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cce5b07cdb000000000000000000000000919fa96e88d67499339577fa202345436bcdaf7900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d669621c0f97b11f8e74fa57bbf7e33dfb093f9100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000648a6a1e85000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000353c1f0bc78fbbc245b3c93ef77b1dcc5b77d2a02710000000000000000000000000000000000000000000a1690fa04aa0cf64f600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a49f865422000000000000000000000000d533a949740bb3306d119cc777fa900ba034cdd1660f99000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000ae076a41b227e7ba07ca7c5791df168de7e1664600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 12, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 7, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 7, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>{
        processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
    }
);
